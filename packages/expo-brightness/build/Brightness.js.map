{"version":3,"file":"Brightness.js","sourceRoot":"","sources":["../src/Brightness.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { PermissionResponse, PermissionStatus } from 'expo-modules-core';\nimport { Platform } from 'react-native';\n\nimport ExpoBrightness from './ExpoBrightness';\n\nexport enum BrightnessMode {\n  UNKNOWN = 0,\n  AUTOMATIC = 1,\n  MANUAL = 2,\n}\n\nexport { PermissionResponse, PermissionStatus };\n\n/**\n * Returns whether the Brightness API is enabled on the current device. This does not check the app permissions.\n *\n * @returns Async `boolean`, indicating whether the Brightness API is available on the current device. Currently this resolves `true` on iOS and Android only.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoBrightness.getBrightnessAsync;\n}\n\nexport async function getBrightnessAsync(): Promise<number> {\n  if (!ExpoBrightness.getBrightnessAsync) {\n    throw new UnavailabilityError('expo-brightness', 'getBrightnessAsync');\n  }\n  return await ExpoBrightness.getBrightnessAsync();\n}\n\nexport async function setBrightnessAsync(brightnessValue: number): Promise<void> {\n  if (!ExpoBrightness.setBrightnessAsync) {\n    throw new UnavailabilityError('expo-brightness', 'setBrightnessAsync');\n  }\n  const clampedBrightnessValue = Math.max(0, Math.min(brightnessValue, 1));\n  if (isNaN(clampedBrightnessValue)) {\n    throw new TypeError(`setBrightnessAsync cannot be called with ${brightnessValue}`);\n  }\n  return await ExpoBrightness.setBrightnessAsync(clampedBrightnessValue);\n}\n\nexport async function getSystemBrightnessAsync(): Promise<number> {\n  if (Platform.OS !== 'android') {\n    return await getBrightnessAsync();\n  }\n  return await ExpoBrightness.getSystemBrightnessAsync();\n}\n\nexport async function setSystemBrightnessAsync(brightnessValue: number): Promise<void> {\n  const clampedBrightnessValue = Math.max(0, Math.min(brightnessValue, 1));\n  if (isNaN(clampedBrightnessValue)) {\n    throw new TypeError(`setSystemBrightnessAsync cannot be called with ${brightnessValue}`);\n  }\n  if (Platform.OS !== 'android') {\n    return await setBrightnessAsync(clampedBrightnessValue);\n  }\n  return await ExpoBrightness.setSystemBrightnessAsync(clampedBrightnessValue);\n}\n\nexport async function useSystemBrightnessAsync(): Promise<void> {\n  if (Platform.OS !== 'android') {\n    return;\n  }\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return await ExpoBrightness.useSystemBrightnessAsync();\n}\n\nexport async function isUsingSystemBrightnessAsync(): Promise<boolean> {\n  if (Platform.OS !== 'android') {\n    return false;\n  }\n  return await ExpoBrightness.isUsingSystemBrightnessAsync();\n}\n\nexport async function getSystemBrightnessModeAsync(): Promise<BrightnessMode> {\n  if (Platform.OS !== 'android') {\n    return BrightnessMode.UNKNOWN;\n  }\n  return await ExpoBrightness.getSystemBrightnessModeAsync();\n}\n\nexport async function setSystemBrightnessModeAsync(brightnessMode: BrightnessMode): Promise<void> {\n  if (Platform.OS !== 'android' || brightnessMode === BrightnessMode.UNKNOWN) {\n    return;\n  }\n  return await ExpoBrightness.setSystemBrightnessModeAsync(brightnessMode);\n}\n\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  return ExpoBrightness.getPermissionsAsync();\n}\n\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  return ExpoBrightness.requestPermissionsAsync();\n}\n"]}