{"version":3,"file":"AdSettings.js","sourceRoot":"","sources":["../src/AdSettings.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AAC3E,OAAO,EAAsB,gBAAgB,EAAwB,MAAM,mBAAmB,CAAC;AAC/F,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExC,MAAM,EAAE,oBAAoB,EAAE,GAAG,kBAAkB,CAAC;AAIpD,OAAO,EAAsB,gBAAgB,EAAwB,CAAC;AAEtE,MAAM,0BAA0B,GAAuB;IACrD,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,OAAO;IAChB,WAAW,EAAE,IAAI;IACjB,MAAM,EAAE,gBAAgB,CAAC,OAAO;CACjC,CAAC;AAEF,8BAA8B;AAC9B,eAAe;IACb;;OAEG;IACH,IAAI,iBAAiB;QACnB,OAAO,oBAAoB,CAAC,iBAAiB,CAAC;IAChD,CAAC;IAED,KAAK,CAAC,uBAAuB;QAC3B,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;YAC7B,OAAO,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;SACpD;QAED,IAAI,CAAC,oBAAoB,CAAC,uBAAuB,EAAE;YACjD,MAAM,IAAI,mBAAmB,CAAC,mBAAmB,EAAE,yBAAyB,CAAC,CAAC;SAC/E;QACD,OAAO,MAAM,oBAAoB,CAAC,uBAAuB,EAAE,CAAC;IAC9D,CAAC;IACD,KAAK,CAAC,mBAAmB;QACvB,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;YAC7B,OAAO,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;SACpD;QAED,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,EAAE;YAC7C,MAAM,IAAI,mBAAmB,CAAC,mBAAmB,EAAE,qBAAqB,CAAC,CAAC;SAC3E;QACD,OAAO,MAAM,oBAAoB,CAAC,mBAAmB,EAAE,CAAC;IAC1D,CAAC;IAED;;OAEG;IACH,4BAA4B,CAAC,OAAgB;QAC3C,sBAAsB;QACtB,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;YACzB,OAAO;SACR;QAED,IAAI,CAAC,oBAAoB,CAAC,4BAA4B,EAAE;YACtD,MAAM,IAAI,mBAAmB,CAAC,mBAAmB,EAAE,8BAA8B,CAAC,CAAC;SACpF;QACD,oBAAoB,CAAC,4BAA4B,CAAC,OAAO,CAAC,CAAC;IAC7D,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,UAAkB;QAC9B,oBAAoB,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IACjD,CAAC;IACD;;OAEG;IACH,gBAAgB;QACd,oBAAoB,CAAC,gBAAgB,EAAE,CAAC;IAC1C,CAAC;IACD;;OAEG;IACH,WAAW,CAAC,QAAoB;QAC9B,oBAAoB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC;IACD;;OAEG;IACH,kBAAkB,CAAC,UAAmB;QACpC,oBAAoB,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;IACtD,CAAC;IACD;;OAEG;IACH,mBAAmB,CAAC,gBAAwB;QAC1C,oBAAoB,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;IAC7D,CAAC;IACD;;OAEG;IACH,YAAY,CAAC,SAAiB;QAC5B,oBAAoB,CAAC,YAAY,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC;IACvD,CAAC;CACF,CAAC","sourcesContent":["import { NativeModulesProxy, UnavailabilityError } from '@unimodules/core';\nimport { PermissionResponse, PermissionStatus, PermissionExpiration } from 'expo-modules-core';\nimport { Platform } from 'react-native';\n\nconst { CTKAdSettingsManager } = NativeModulesProxy;\n\nexport type AdLogLevel = 'none' | 'debug' | 'verbose' | 'warning' | 'error' | 'notification';\n\nexport { PermissionResponse, PermissionStatus, PermissionExpiration };\n\nconst androidPermissionsResponse: PermissionResponse = {\n  granted: true,\n  expires: 'never',\n  canAskAgain: true,\n  status: PermissionStatus.GRANTED,\n};\n\n// TODO: rewrite the docblocks\nexport default {\n  /**\n   * Contains hash of the device id\n   */\n  get currentDeviceHash(): string {\n    return CTKAdSettingsManager.currentDeviceHash;\n  },\n\n  async requestPermissionsAsync(): Promise<PermissionResponse> {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(androidPermissionsResponse);\n    }\n\n    if (!CTKAdSettingsManager.requestPermissionsAsync) {\n      throw new UnavailabilityError('expo-ads-facebook', 'requestPermissionsAsync');\n    }\n    return await CTKAdSettingsManager.requestPermissionsAsync();\n  },\n  async getPermissionsAsync(): Promise<PermissionResponse> {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(androidPermissionsResponse);\n    }\n\n    if (!CTKAdSettingsManager.getPermissionsAsync) {\n      throw new UnavailabilityError('expo-ads-facebook', 'getPermissionsAsync');\n    }\n    return await CTKAdSettingsManager.getPermissionsAsync();\n  },\n\n  /**\n   * Sets whether Facebook SDK should enable advertising tracking.\n   */\n  setAdvertiserTrackingEnabled(enabled: boolean): void {\n    // noop outside of iOS\n    if (Platform.OS !== 'ios') {\n      return;\n    }\n\n    if (!CTKAdSettingsManager.setAdvertiserTrackingEnabled) {\n      throw new UnavailabilityError('expo-ads-facebook', 'setAdvertiserTrackingEnabled');\n    }\n    CTKAdSettingsManager.setAdvertiserTrackingEnabled(enabled);\n  },\n\n  /**\n   * Registers given device with `deviceHash` to receive test Facebook ads.\n   */\n  addTestDevice(deviceHash: string): void {\n    CTKAdSettingsManager.addTestDevice(deviceHash);\n  },\n  /**\n   * Clears previously set test devices\n   */\n  clearTestDevices(): void {\n    CTKAdSettingsManager.clearTestDevices();\n  },\n  /**\n   * Sets current SDK log level\n   */\n  setLogLevel(logLevel: AdLogLevel): void {\n    CTKAdSettingsManager.setLogLevel(logLevel);\n  },\n  /**\n   * Specifies whether ads are treated as child-directed\n   */\n  setIsChildDirected(isDirected: boolean): void {\n    CTKAdSettingsManager.setIsChildDirected(isDirected);\n  },\n  /**\n   * Sets mediation service name\n   */\n  setMediationService(mediationService: string): void {\n    CTKAdSettingsManager.setMediationService(mediationService);\n  },\n  /**\n   * Sets URL prefix\n   */\n  setUrlPrefix(urlPrefix: string): void {\n    CTKAdSettingsManager.setUrlPrefix(urlPrefix || null);\n  },\n};\n"]}